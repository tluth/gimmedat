---
parameters:
  - name: aws_environment
    displayName: "AWS Environment to Deploy To:"
    type: string
    default: "dev"
    values:
      - "dev"
      - "qa"
      - "preprod"
      - "prod"

variables:
  - template: azure-templates/common/common-variables.yml
  - name: tfdirectory
    value: infra
  - name: tenant
    value: ade
  - name: product
    value: stresstest
  - name: namespace
    value: ${{ variables.tenant }}-${{ variables.product }}-${{ parameters.aws_environment }}
  - name: tf_plan_name
    value: deployment-${{ parameters.aws_environment}}.plan
  - name: tf_plan_path
    value: .terraform
  - name: tf_artifact
    value: ${{ variables.tf_plan_path }}/${{ variables.tf_plan_name }}
  - name: build_role
    value: deploy-service-roles/${{ variables.namespace }}-deploy-role
  - name: shared_temp_path
    value: "/__w/_temp"
  - name: lambda_builder_folder_path
    value: ${{ variables.shared_temp_path }}/lambda-builder

trigger:
  branches:
    include:
      - "*"
  paths:
    exclude:
      - /**/*.md
      - /build
      - /docs
      - /.github

# no PR triggers
pr: none

pool:
  name: adp-self-hosted-agent
  demands:
    - OS -equals Linux
    - ENV -equals prod
    - Agent.OSArchitecture -equals ARM64

stages:
  - stage: terraform_plan
    displayName: Run TF Plan for ${{ upper(parameters.aws_environment)}}
    dependsOn: []

    jobs:
      - job: terraform_plan
        displayName: Terraform Plan (${{ upper(parameters.aws_environment)}})

        workspace:
          clean: all

        container:
          image: ${{ variables.adp_buildagent_image }}
          mapDockerSocket: false

        steps:
          - checkout: self

          - template: azure-templates/terraform/install.yml
            parameters:
              directory: $(System.DefaultWorkingDirectory)

          - template: azure-templates/common/assume-role.yml
            parameters:
              build_role: ${{ variables.build_role }}
              aws_environment: ${{ parameters.aws_environment }}

          - template: azure-templates/terraform/init.yml
            parameters:
              directory: ${{ variables.tfdirectory }}
              aws_environment: ${{ parameters.aws_environment }}

          - template: azure-templates/terraform/plan.yml
            parameters:
              directory: ${{ variables.tfdirectory }}
              aws_environment: ${{ parameters.aws_environment }}
              tf_environment:
                TF_ARTIFACT: ${{ variables.tf_artifact}}
                TF_VAR_lambda_builder_folder_path: ${{ variables.lambda_builder_folder_path }}

          - task: PublishPipelineArtifact@1
            displayName: Stash Terraform Plan Artifact
            inputs:
              targetPath: "${{ variables.tfdirectory }}/${{ variables.tf_artifact}}"
              artifactName: ${{ variables.tf_plan_name}}
              artifactType: "pipeline"

  - stage: terraform_authorise
    displayName: Authorise Deployment to ${{ upper(parameters.aws_environment)}}
    dependsOn: [terraform_plan]
    jobs:
      - job: authorise_deployment
        displayName: Authorise Deployment to ${{ upper(parameters.aws_environment)}}
        dependsOn: []
        condition: succeeded()
        pool: server
        timeoutInMinutes: 60
        steps:
          - task: ManualValidation@0
            inputs:
              instructions: "Please check the Terraform plan to validate the build configuration and resume"

  - stage: terraform_apply
    displayName: Run TF Apply on ${{ upper(parameters.aws_environment)}}
    dependsOn: terraform_authorise
    condition: and(succeeded(), eq(dependencies.terraform_plan.outputs['terraform_plan.tfplan.TERRAFORM_CHANGE'], 'true'))

    jobs:
      - job: terraform_apply
        displayName: Terraform Apply (${{ upper(parameters.aws_environment)}})

        workspace:
          clean: all

        container:
          image: ${{ variables.adp_buildagent_image }}
          mapDockerSocket: true
          env:
            TMP: ${{ variables.shared_temp_path }} # common tmp between containers ( used in DinD )

        steps:
          - checkout: self

          - task: DownloadPipelineArtifact@2
            displayName: Retrieve Terraform Plan Artifact
            inputs:
              source: "current"
              artifactName: ${{ variables.tf_plan_name}}
              path: "${{ variables.tfdirectory }}/${{ variables.tf_plan_path }}"

          - template: azure-templates/terraform/install.yml
            parameters:
              directory: $(System.DefaultWorkingDirectory)

          - template: azure-templates/common/assume-role.yml
            parameters:
              build_role: ${{ variables.build_role }}
              aws_environment: ${{ parameters.aws_environment }}

          - template: azure-templates/terraform/init.yml
            parameters:
              directory: ${{ variables.tfdirectory }}
              aws_environment: ${{ parameters.aws_environment }}

          - task: Bash@3
            displayName: Copy Lambda builder Folder to TMP
            inputs:
              targetType: "inline"
              script: |
                cp -r ${{ variables.tfdirectory }}/lambda-builder $TMP

          - template: azure-templates/terraform/apply.yml
            parameters:
              directory: ${{ variables.tfdirectory }}
              aws_environment: ${{ parameters.aws_environment }}
              tf_environment:
                TF_ARTIFACT: ${{ variables.tf_artifact}}
                TF_VAR_lambda_builder_folder_path: ${{ variables.lambda_builder_folder_path }}
